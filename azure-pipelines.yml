# Azure DevOps Pipeline for PHP on Linux Web App
# This pipeline builds, packages, and deploys a PHP application to Azure App Service

trigger:
- master

variables:
  # Azure Subscription for deployment
  azureSubscription: 'a71cd520-4c77-4b70-a643-9a7482685cf2'

  # Web App Name
  webAppName: 'demohtml'

  # Agent VM Image
  vmImageName: 'ubuntu-latest'

  # Environment Name
  environmentName: 'demohtml'

  # Root Folder where composer.json is located
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: 'Build Stage'
  variables:
    phpVersion: '8.2'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      displayName: 'Checkout Source Code'

    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        php -version
      displayName: 'Set PHP Version'

    - script: ls -la $(rootFolder)
      displayName: 'Verify Files in Root Folder'

    - script: |
        if [ ! -f "$(rootFolder)/composer.json" ]; then
          echo "Error: composer.json not found in $(rootFolder)."
          exit 1
        fi
      displayName: 'Ensure composer.json Exists'

    - script: composer clear-cache
      displayName: 'Clear Composer Cache'

    - script: composer install --no-interaction --prefer-dist --optimize-autoloader
      workingDirectory: $(rootFolder)
      displayName: 'Run Composer Install'

    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(rootFolder)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload Package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App: $(webAppName)'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              appType: webAppLinux
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
